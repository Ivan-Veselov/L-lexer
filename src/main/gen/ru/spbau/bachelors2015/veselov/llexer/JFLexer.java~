/* The following code was generated by JFlex 1.7.0-SNAPSHOT tweaked for IntelliJ platform */

package ru.spbau.bachelors2015.veselov.llexer;

import ru.spbau.bachelors2015.veselov.llexer.tokens.*;
import ru.spbau.bachelors2015.veselov.llexer.tokens.keywords.*;

import static ru.spbau.bachelors2015.veselov.llexer.tokens.OperatorType.GRT;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.7.0-SNAPSHOT
 * from the specification file <tt>L.jflex</tt>
 */
class JFLexer {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0, 0
  };

  /** 
   * Translates characters to character classes
   * Chosen bits are [8, 6, 7]
   * Total runtime size is 1296 bytes
   */
  public static int ZZ_CMAP(int ch) {
    return ZZ_CMAP_A[(ZZ_CMAP_Y[ZZ_CMAP_Z[ch>>13]|((ch>>7)&0x3f)]<<7)|(ch&0x7f)];
  }

  /* The ZZ_CMAP_Z table has 136 entries */
  static final char ZZ_CMAP_Z[] = zzUnpackCMap(
    "\1\0\207\100");

  /* The ZZ_CMAP_Y table has 128 entries */
  static final char ZZ_CMAP_Y[] = zzUnpackCMap(
    "\1\0\1\1\1\2\175\1");

  /* The ZZ_CMAP_A table has 384 entries */
  static final char ZZ_CMAP_A[] = zzUnpackCMap(
    "\11\0\1\2\1\1\1\0\1\2\1\1\22\0\1\2\1\52\3\0\1\50\1\55\3\0\1\47\1\45\1\0\1"+
    "\46\1\0\1\4\14\0\1\54\1\51\1\53\2\0\1\35\1\37\1\0\1\27\1\15\1\7\1\41\1\13"+
    "\1\5\2\0\1\21\1\0\1\17\1\31\2\0\1\33\1\23\1\11\1\43\1\0\1\25\7\0\1\3\1\0\1"+
    "\36\1\40\1\3\1\30\1\16\1\10\1\42\1\14\1\6\2\3\1\22\1\3\1\20\1\32\2\3\1\34"+
    "\1\24\1\12\1\44\1\3\1\26\3\3\1\0\1\56\263\0\2\5\115\0\1\23");

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\2\1\1\2\1\3\1\0\1\2\1\0\1\2\1\0"+
    "\1\2\1\0\1\2\1\0\1\2\1\0\1\2\1\0"+
    "\1\2\1\0\1\2\1\4\1\5\1\6\1\7\2\0"+
    "\1\10\1\11\2\0\1\12\2\13\1\0\1\2\2\0"+
    "\2\2\2\0\2\2\2\0\2\2\2\14\1\0\1\2"+
    "\1\0\1\2\1\15\1\16\1\17\1\20\1\21\1\22"+
    "\1\0\1\2\2\0\2\2\1\23\1\0\1\23\1\2"+
    "\2\0\2\2\1\0\1\2\1\0\1\2\1\0\1\2"+
    "\1\24\1\25\1\24\1\25\2\26\2\0\2\2\2\27"+
    "\1\0\1\2\2\30\1\31\1\32\1\31\1\32\2\33";

  private static int [] zzUnpackAction() {
    int [] result = new int[101];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\57\0\136\0\215\0\274\0\353\0\u011a\0\u0149"+
    "\0\u0178\0\u01a7\0\u01d6\0\u0205\0\u0234\0\u0263\0\u0292\0\u02c1"+
    "\0\u02f0\0\u031f\0\u034e\0\u037d\0\u03ac\0\u03ac\0\u03ac\0\u03ac"+
    "\0\u03db\0\u040a\0\u0439\0\u0468\0\u0497\0\u04c6\0\u04f5\0\u03ac"+
    "\0\136\0\u0524\0\u0553\0\u0582\0\u05b1\0\u05e0\0\u060f\0\u063e"+
    "\0\u066d\0\u069c\0\u06cb\0\u06fa\0\u0729\0\u0758\0\u0787\0\u03ac"+
    "\0\136\0\u07b6\0\u07e5\0\u0814\0\u0843\0\u03ac\0\u03ac\0\u03ac"+
    "\0\u03ac\0\u03ac\0\u03ac\0\u0872\0\u08a1\0\u08d0\0\u08ff\0\u092e"+
    "\0\u095d\0\u03ac\0\u098c\0\136\0\u09bb\0\u09ea\0\u0a19\0\u0a48"+
    "\0\u0a77\0\u0aa6\0\u0ad5\0\u0b04\0\u0b33\0\u0b62\0\u0b91\0\u03ac"+
    "\0\u03ac\0\136\0\136\0\u03ac\0\136\0\u0bc0\0\u0bef\0\u0c1e"+
    "\0\u0c4d\0\u03ac\0\136\0\u0c7c\0\u0cab\0\u03ac\0\136\0\u03ac"+
    "\0\u03ac\0\136\0\136\0\u03ac\0\136";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[101];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\0\2\2\1\3\1\4\1\5\1\6\1\7\1\10"+
    "\1\11\1\12\1\0\1\3\1\13\1\14\1\0\1\3"+
    "\1\0\1\3\1\0\1\3\1\15\1\16\1\17\1\20"+
    "\1\0\1\3\1\21\1\22\1\0\1\3\1\23\1\24"+
    "\1\0\1\3\1\0\1\3\1\25\1\26\1\27\1\30"+
    "\1\31\1\32\1\33\1\34\1\35\1\36\1\0\2\2"+
    "\54\0\1\3\2\0\54\3\4\0\1\37\61\0\2\40"+
    "\46\0\1\3\2\0\4\3\2\41\46\3\35\0\2\42"+
    "\20\0\1\3\2\0\32\3\2\43\20\3\13\0\2\44"+
    "\16\0\2\45\22\0\1\3\2\0\10\3\2\46\16\3"+
    "\2\47\22\3\17\0\2\50\2\51\34\0\1\3\2\0"+
    "\14\3\2\52\2\53\34\3\13\0\2\54\16\0\2\55"+
    "\22\0\1\3\2\0\10\3\2\56\16\3\2\57\22\3"+
    "\31\0\2\60\24\0\1\3\2\0\26\3\2\61\24\3"+
    "\15\0\2\62\40\0\1\3\2\0\12\3\2\63\40\3"+
    "\15\0\2\64\40\0\1\3\2\0\12\3\2\65\40\3"+
    "\130\0\1\66\56\0\1\67\56\0\1\70\56\0\1\71"+
    "\62\0\1\72\57\0\1\73\1\37\1\0\55\37\21\0"+
    "\2\74\34\0\1\3\2\0\16\3\2\75\34\3\15\0"+
    "\2\76\103\0\2\77\12\0\1\3\2\0\12\3\2\100"+
    "\41\3\2\0\40\3\2\101\12\3\27\0\2\102\51\0"+
    "\2\103\32\0\1\3\2\0\24\3\2\104\27\3\2\0"+
    "\20\3\2\105\32\3\5\0\2\106\55\0\2\107\50\0"+
    "\1\3\2\0\2\3\2\110\51\3\2\0\2\3\2\111"+
    "\50\3\35\0\2\112\20\0\1\3\2\0\32\3\2\113"+
    "\20\3\41\0\2\114\14\0\1\3\2\0\36\3\2\115"+
    "\14\3\23\0\2\116\32\0\1\3\2\0\20\3\2\117"+
    "\32\3\17\0\2\120\53\0\2\121\40\0\1\3\2\0"+
    "\14\3\2\122\37\3\2\0\12\3\2\123\40\3\15\0"+
    "\2\124\40\0\1\3\2\0\12\3\2\125\40\3\21\0"+
    "\2\126\45\0\2\127\44\0\1\3\2\0\16\3\2\130"+
    "\35\3\2\0\6\3\2\131\44\3\27\0\2\132\26\0"+
    "\1\3\2\0\24\3\2\133\26\3\5\0\2\134\50\0"+
    "\1\3\2\0\2\3\2\135\50\3\15\0\2\136\40\0"+
    "\1\3\2\0\12\3\2\137\40\3\15\0\2\140\55\0"+
    "\2\141\40\0\1\3\2\0\12\3\2\142\41\3\2\0"+
    "\12\3\2\143\40\3\17\0\2\144\36\0\1\3\2\0"+
    "\14\3\2\145\36\3";

  private static int [] zzUnpackTrans() {
    int [] result = new int[3290];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String[] ZZ_ERROR_MSG = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\4\1\1\0\1\1\1\0\1\1\1\0\1\1\1\0"+
    "\1\1\1\0\1\1\1\0\1\1\1\0\1\1\1\0"+
    "\1\1\4\11\2\0\2\1\2\0\1\1\1\11\1\1"+
    "\1\0\1\1\2\0\2\1\2\0\2\1\2\0\2\1"+
    "\1\11\1\1\1\0\1\1\1\0\1\1\6\11\1\0"+
    "\1\1\2\0\2\1\1\11\1\0\2\1\2\0\2\1"+
    "\1\0\1\1\1\0\1\1\1\0\1\1\2\11\2\1"+
    "\1\11\1\1\2\0\2\1\1\11\1\1\1\0\1\1"+
    "\1\11\1\1\2\11\2\1\1\11\1\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[101];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private CharSequence zzBuffer = "";

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /**
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;

  /* user code: */
    private int yyline = 0;

    private int yycolumn = 0;


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  JFLexer(java.io.Reader in) {
    this.zzReader = in;
  }


  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    int size = 0;
    for (int i = 0, length = packed.length(); i < length; i += 2) {
      size += packed.charAt(i);
    }
    char[] map = new char[size];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < packed.length()) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }

  public final int getTokenStart() {
    return zzStartRead;
  }

  public final int getTokenEnd() {
    return getTokenStart() + yylength();
  }

  public void reset(CharSequence buffer, int start, int end, int initialState) {
    zzBuffer = buffer;
    zzCurrentPos = zzMarkedPos = zzStartRead = start;
    zzAtEOF  = false;
    zzAtBOL = true;
    zzEndRead = end;
    yybegin(initialState);
  }

  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   *
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {
    return true;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final CharSequence yytext() {
    return zzBuffer.subSequence(zzStartRead, zzMarkedPos);
  }


  /**
   * Returns the character at position <tt>pos</tt> from the
   * matched text.
   *
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch.
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer.charAt(zzStartRead+pos);
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of
   * yypushback(int) and a match-all fallback rule) this method
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public Token yylex() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    CharSequence zzBufferL = zzBuffer;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      boolean zzR = false;
      int zzCh;
      int zzCharCount;
      for (zzCurrentPosL = zzStartRead  ;
           zzCurrentPosL < zzMarkedPosL ;
           zzCurrentPosL += zzCharCount ) {
        zzCh = Character.codePointAt(zzBufferL, zzCurrentPosL/*, zzMarkedPosL*/);
        zzCharCount = Character.charCount(zzCh);
        switch (zzCh) {
        case '\u000B':
        case '\u000C':
        case '\u0085':
        case '\u2028':
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn += zzCharCount;
        }
      }

      if (zzR) {
        // peek one character ahead if it is \n (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL.charAt(zzMarkedPosL) == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof) 
            zzPeek = false;
          else 
            zzPeek = zzBufferL.charAt(zzMarkedPosL) == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL/*, zzEndReadL*/);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL/*, zzEndReadL*/);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + ZZ_CMAP(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
        return null;
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1: 
            { 
            }
          case 28: break;
          case 2: 
            { return new Identifier(yyline, yycolumn, yytext().length(), yytext().toString());
            }
          case 29: break;
          case 3: 
            { return new Operator(yyline, yycolumn, yytext().length(), DIV)
            }
          case 30: break;
          case 4: 
            { return new Operator(yyline, yycolumn, yytext().length(), PLUS)
            }
          case 31: break;
          case 5: 
            { return new Operator(yyline, yycolumn, yytext().length(), MINUS)
            }
          case 32: break;
          case 6: 
            { return new Operator(yyline, yycolumn, yytext().length(), MULT)
            }
          case 33: break;
          case 7: 
            { return new Operator(yyline, yycolumn, yytext().length(), REM)
            }
          case 34: break;
          case 8: 
            { return new Operator(yyline, yycolumn, yytext().length(), GRT)
            }
          case 35: break;
          case 9: 
            { return new Operator(yyline, yycolumn, yytext().length(), LESS)
            }
          case 36: break;
          case 10: 
            { return new Commentary(yyline, yycolumn, yytext().length(), yytext().toString());
            }
          case 37: break;
          case 11: 
            { return new IfKeyWord(yyline, yycolumn, yytext().length());
            }
          case 38: break;
          case 12: 
            { return new DoKeyWord(yyline, yycolumn, yytext().length());
            }
          case 39: break;
          case 13: 
            { return new Operator(yyline, yycolumn, yytext().length(), EQ)
            }
          case 40: break;
          case 14: 
            { return new Operator(yyline, yycolumn, yytext().length(), NEQ)
            }
          case 41: break;
          case 15: 
            { return new Operator(yyline, yycolumn, yytext().length(), GRT_EQ)
            }
          case 42: break;
          case 16: 
            { return new Operator(yyline, yycolumn, yytext().length(), LESS_EQ)
            }
          case 43: break;
          case 17: 
            { return new Operator(yyline, yycolumn, yytext().length(), AND)
            }
          case 44: break;
          case 18: 
            { return new Operator(yyline, yycolumn, yytext().length(), OR)
            }
          case 45: break;
          case 19: 
            { return new EndKeyWord(yyline, yycolumn, yytext().length());
            }
          case 46: break;
          case 20: 
            { return new ThenKeyWord(yyline, yycolumn, yytext().length());
            }
          case 47: break;
          case 21: 
            { return new TrueKeyWord(yyline, yycolumn, yytext().length());
            }
          case 48: break;
          case 22: 
            { return new ElseKeyWord(yyline, yycolumn, yytext().length());
            }
          case 49: break;
          case 23: 
            { return new ReadKeyWord(yyline, yycolumn, yytext().length());
            }
          case 50: break;
          case 24: 
            { return new FalseKeyWord(yyline, yycolumn, yytext().length());
            }
          case 51: break;
          case 25: 
            { return new WhileKeyWord(yyline, yycolumn, yytext().length());
            }
          case 52: break;
          case 26: 
            { return new WriteKeyWord(yyline, yycolumn, yytext().length());
            }
          case 53: break;
          case 27: 
            { return new BeginKeyWord(yyline, yycolumn, yytext().length());
            }
          case 54: break;
          default:
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
