/* The following code was generated by JFlex 1.7.0-SNAPSHOT tweaked for IntelliJ platform */

package ru.spbau.bachelors2015.veselov.llexer;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.7.0-SNAPSHOT
 * from the specification file <tt>test.jflex</tt>
 */
class LLexer {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;
  public static final int STRING = 2;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0,  0,  1, 1
  };

  /** 
   * Translates characters to character classes
   * Chosen bits are [12, 6, 3]
   * Total runtime size is 14800 bytes
   */
  public static int ZZ_CMAP(int ch) {
    return ZZ_CMAP_A[(ZZ_CMAP_Y[(ZZ_CMAP_Z[ch>>9]<<6)|((ch>>3)&0x3f)]<<3)|(ch&0x7)];
  }

  /* The ZZ_CMAP_Z table has 2176 entries */
  static final char ZZ_CMAP_Z[] = zzUnpackCMap(
    "\1\0\1\1\1\2\1\3\1\4\1\5\1\6\1\7\1\10\1\11\1\12\1\13\1\14\1\15\1\16\1\17\1"+
    "\20\5\21\1\22\1\23\1\24\1\21\14\25\1\26\50\25\1\27\2\25\1\30\1\31\1\32\1\33"+
    "\25\25\1\34\20\21\1\35\1\36\1\37\1\40\1\41\1\42\1\43\1\21\1\44\1\45\1\46\1"+
    "\21\1\47\2\21\1\50\4\21\1\25\1\51\1\52\5\21\2\25\1\53\31\21\1\25\1\54\1\21"+
    "\1\55\40\21\1\56\17\21\1\57\1\60\1\61\1\62\13\21\1\63\10\21\123\25\1\64\7"+
    "\25\1\65\1\66\37\21\1\25\1\66\u0582\21\1\67\u017f\21");

  /* The ZZ_CMAP_Y table has 3584 entries */
  static final char ZZ_CMAP_Y[] = zzUnpackCMap(
    "\1\0\1\1\1\0\1\2\1\3\1\4\1\5\1\6\1\7\2\10\1\11\1\12\1\13\1\14\1\15\4\0\1\16"+
    "\1\17\1\20\1\21\2\10\1\22\3\10\1\22\71\10\1\23\1\10\1\24\1\25\1\26\1\27\2"+
    "\25\16\0\1\30\1\16\1\31\1\32\2\10\1\33\11\10\1\34\21\10\1\35\1\36\23\10\1"+
    "\25\1\7\3\10\1\22\1\37\1\7\4\10\1\40\1\41\4\0\1\42\1\43\1\25\3\10\2\44\1\25"+
    "\1\45\1\46\1\0\1\47\5\10\1\50\3\0\1\51\1\52\13\10\1\53\1\42\1\54\1\55\1\0"+
    "\1\56\1\25\1\57\1\60\3\10\3\0\1\61\12\10\1\62\1\0\1\63\1\25\1\0\1\64\3\10"+
    "\1\50\1\65\1\21\2\10\1\62\1\66\1\67\1\70\2\25\3\10\1\71\10\25\1\72\1\26\6"+
    "\25\1\73\2\0\1\74\1\75\6\10\1\76\2\0\1\77\1\10\1\100\1\0\2\7\1\101\1\102\1"+
    "\103\2\10\1\72\1\104\1\105\1\106\1\107\1\57\1\110\1\100\1\0\1\111\1\46\1\101"+
    "\1\112\1\103\2\10\1\72\1\113\1\114\1\115\1\116\1\117\1\120\1\121\1\0\1\122"+
    "\1\25\1\101\1\34\1\33\2\10\1\72\1\123\1\105\1\42\1\124\1\125\1\25\1\100\1"+
    "\0\1\37\1\25\1\101\1\102\1\103\2\10\1\72\1\123\1\105\1\106\1\116\1\121\1\110"+
    "\1\100\1\0\1\37\1\25\1\126\1\127\1\130\1\131\1\132\1\127\1\10\1\133\1\134"+
    "\1\135\1\136\1\25\1\121\1\0\1\25\1\37\1\101\1\30\1\72\2\10\1\72\1\137\1\140"+
    "\1\141\1\135\1\142\1\24\1\100\1\0\2\25\1\143\1\30\1\72\2\10\1\72\1\137\1\105"+
    "\1\141\1\135\1\142\1\31\1\100\1\0\1\144\1\25\1\143\1\30\1\72\4\10\1\145\1"+
    "\141\1\146\1\57\1\25\1\100\1\0\1\25\1\36\1\143\1\10\1\22\1\36\2\10\1\33\1"+
    "\147\1\22\1\150\1\151\1\0\2\25\1\152\1\25\1\7\5\10\1\153\1\154\1\155\1\74"+
    "\1\0\1\156\4\25\1\157\1\160\1\161\1\7\1\162\1\163\1\153\1\164\1\165\1\166"+
    "\1\0\1\167\4\25\1\125\2\25\1\156\1\0\1\156\1\170\1\171\1\10\1\7\3\10\1\26"+
    "\1\41\1\0\1\141\1\172\1\0\1\41\3\0\1\45\1\173\7\25\5\10\1\50\1\0\1\174\1\0"+
    "\1\156\1\62\1\175\1\176\1\177\1\200\1\10\1\201\1\202\1\0\1\166\4\10\1\34\1"+
    "\20\5\10\1\203\51\10\1\130\1\22\1\130\5\10\1\130\4\10\1\130\1\22\1\130\1\10"+
    "\1\22\7\10\1\130\10\10\1\204\4\25\2\10\2\25\12\10\1\26\1\25\1\7\114\10\1\102"+
    "\2\10\1\7\2\10\1\44\11\10\1\127\1\125\1\25\1\10\1\30\1\205\1\25\2\10\1\205"+
    "\1\25\2\10\1\206\1\25\1\10\1\30\1\207\1\25\6\10\1\210\3\0\1\211\1\212\1\0"+
    "\1\156\3\25\1\213\1\0\1\156\13\10\1\25\5\10\1\214\10\10\1\215\1\25\3\10\1"+
    "\26\1\0\1\2\1\0\1\2\1\121\1\0\3\10\1\215\1\26\1\25\5\10\1\111\2\0\1\52\1\156"+
    "\1\0\1\156\4\25\2\10\1\155\1\2\6\10\1\172\1\74\3\0\1\106\1\0\1\156\1\0\1\156"+
    "\1\40\13\25\1\216\5\10\1\210\1\0\1\216\1\111\1\0\1\156\1\25\1\217\1\2\1\25"+
    "\1\220\3\10\1\77\1\177\1\0\1\64\4\10\1\62\1\0\1\2\1\25\4\10\1\210\2\0\1\25"+
    "\1\0\1\221\1\0\1\64\3\10\1\215\12\25\1\222\2\0\1\223\1\224\1\25\30\10\4\0"+
    "\1\74\2\25\1\73\42\10\2\215\4\10\2\215\1\10\1\225\3\10\1\215\6\10\1\30\1\165"+
    "\1\226\1\26\1\227\1\111\1\10\1\26\1\226\1\26\1\25\1\217\3\25\1\230\1\25\1"+
    "\40\1\125\1\25\1\231\1\25\1\45\1\232\1\37\1\40\2\25\1\10\1\26\3\10\1\44\2"+
    "\25\1\0\1\45\1\233\1\0\1\234\1\25\1\235\1\36\1\147\1\236\1\27\1\237\1\10\1"+
    "\240\1\241\1\242\2\25\5\10\1\125\116\25\5\10\1\22\5\10\1\22\20\10\1\26\1\243"+
    "\1\244\1\25\4\10\1\34\1\20\7\10\1\40\1\25\1\57\2\10\1\22\1\25\10\22\4\0\5"+
    "\25\1\40\72\25\1\241\3\25\1\7\1\201\1\236\1\26\1\7\11\10\1\22\1\245\1\7\12"+
    "\10\1\203\1\241\4\10\1\215\1\7\12\10\1\22\2\25\3\10\1\44\6\25\170\10\1\215"+
    "\11\25\71\10\1\26\6\25\21\10\1\26\10\25\5\10\1\215\41\10\1\26\2\10\1\0\1\244"+
    "\2\25\5\10\1\155\1\73\1\246\3\10\1\57\12\10\1\156\3\25\1\40\1\10\1\36\14\10"+
    "\1\247\1\111\1\25\1\10\1\44\11\25\1\10\1\250\1\251\2\10\1\50\2\25\1\125\6"+
    "\10\1\111\1\25\1\64\5\10\1\210\1\0\1\45\1\25\1\0\1\156\2\0\1\64\1\46\1\0\1"+
    "\64\2\10\1\62\1\166\2\10\1\155\1\0\1\2\1\25\3\10\1\26\1\75\5\10\1\50\1\0\1"+
    "\234\1\40\1\0\1\156\4\25\5\10\1\77\1\74\1\25\1\251\1\252\1\0\1\156\2\10\1"+
    "\22\1\253\6\10\1\176\1\254\1\214\2\25\1\255\1\10\1\50\1\256\1\25\3\257\1\25"+
    "\2\22\22\25\4\10\1\50\1\260\1\0\1\156\64\10\1\111\1\25\2\10\1\22\1\261\5\10"+
    "\1\111\40\25\55\10\1\215\15\10\1\24\4\25\1\22\1\25\1\261\1\262\1\10\1\72\1"+
    "\22\1\165\1\263\15\10\1\24\3\25\1\261\54\10\1\215\2\25\10\10\1\36\6\10\5\25"+
    "\1\10\1\26\2\0\2\25\1\74\1\25\1\132\2\25\1\241\3\25\1\37\1\30\20\10\1\264"+
    "\1\231\1\25\1\0\1\156\1\7\2\10\1\112\1\7\2\10\1\44\1\265\12\10\1\22\3\36\1"+
    "\266\1\267\2\25\1\270\1\10\1\137\2\10\1\22\2\10\1\271\1\10\1\215\1\10\1\215"+
    "\4\25\17\10\1\44\10\25\6\10\1\26\20\25\1\272\20\25\3\10\1\26\6\10\1\125\5"+
    "\25\3\10\1\22\2\25\3\10\1\44\6\25\3\10\1\215\4\10\1\111\1\10\1\236\5\25\23"+
    "\10\1\215\1\0\1\156\52\25\1\215\1\72\4\10\1\34\1\273\2\10\1\215\25\25\2\10"+
    "\1\215\1\25\3\10\1\24\10\25\7\10\1\265\10\25\1\274\1\73\1\137\1\7\2\10\1\111"+
    "\1\115\4\25\3\10\1\26\20\25\6\10\1\215\1\25\2\10\1\215\1\25\2\10\1\44\21\25"+
    "\11\10\1\125\66\25\1\220\6\10\1\0\1\74\3\25\1\121\1\0\2\25\1\220\5\10\1\0"+
    "\1\275\2\25\3\10\1\125\1\0\1\156\1\220\3\10\1\155\1\0\1\141\1\0\10\25\1\220"+
    "\5\10\1\50\1\0\1\276\1\25\1\0\1\156\24\25\5\10\1\50\1\0\1\25\1\0\1\156\46"+
    "\25\55\10\1\22\22\25\14\10\1\44\63\25\5\10\1\22\72\25\7\10\1\125\130\25\10"+
    "\10\1\26\1\25\1\77\4\0\1\74\1\25\1\57\1\220\1\10\14\25\1\24\153\25\1\277\1"+
    "\300\2\0\1\301\1\2\3\25\1\302\22\25\1\303\67\25\12\10\1\30\10\10\1\30\1\304"+
    "\1\305\1\10\1\306\1\137\7\10\1\34\1\307\2\30\3\10\1\310\1\165\1\36\1\72\51"+
    "\10\1\215\3\10\1\72\2\10\1\203\3\10\1\203\2\10\1\30\3\10\1\30\2\10\1\22\3"+
    "\10\1\22\3\10\1\72\3\10\1\72\2\10\1\203\1\311\6\0\1\137\3\10\1\157\1\7\1\203"+
    "\1\312\1\235\1\313\1\157\1\225\1\157\2\203\1\120\1\10\1\33\1\10\1\111\1\314"+
    "\1\33\1\10\1\111\50\25\32\10\1\22\5\25\106\10\1\26\1\25\33\10\1\215\74\25"+
    "\1\117\3\25\14\0\20\25\36\0\2\25");

  /* The ZZ_CMAP_A table has 1640 entries */
  static final char ZZ_CMAP_A[] = zzUnpackCMap(
    "\11\7\1\3\1\2\1\0\1\3\1\1\6\7\4\0\1\3\1\0\1\25\1\0\1\6\5\0\1\5\1\27\3\0\1"+
    "\4\1\10\11\11\3\0\1\26\3\0\22\6\1\0\1\30\2\0\1\6\1\0\1\12\1\13\1\17\1\6\1"+
    "\22\5\6\1\24\1\21\1\6\1\23\1\20\2\6\1\16\1\14\1\15\6\6\4\0\1\7\2\0\4\6\4\0"+
    "\1\6\2\0\1\7\7\0\1\6\4\0\1\6\5\0\7\6\1\0\2\6\4\0\4\6\16\0\5\6\7\0\1\6\1\0"+
    "\1\6\1\0\5\6\1\0\2\6\6\0\1\6\1\0\3\6\1\0\1\6\1\0\4\6\1\0\13\6\1\0\3\6\1\0"+
    "\5\7\2\0\6\6\1\0\1\6\15\0\1\6\1\0\15\7\1\0\1\7\1\0\2\7\1\0\2\7\1\0\1\7\3\6"+
    "\5\0\5\7\6\0\1\6\4\0\3\7\5\0\3\6\7\7\4\0\2\6\1\7\13\6\1\0\1\6\7\7\2\6\2\7"+
    "\1\0\4\7\2\6\2\7\3\6\2\0\1\6\7\0\1\7\1\6\1\7\6\6\3\7\2\0\11\6\3\7\1\6\6\0"+
    "\2\7\6\6\4\7\2\6\2\0\2\7\1\6\11\7\1\6\3\7\1\6\5\7\2\0\1\6\3\7\4\0\1\6\1\0"+
    "\6\6\4\0\13\7\1\0\4\7\6\6\3\7\1\6\2\7\1\6\7\7\2\6\2\7\2\0\2\7\1\0\3\7\1\0"+
    "\10\6\2\0\2\6\2\0\6\6\1\0\1\6\3\0\4\6\2\0\1\7\1\6\7\7\2\0\2\7\2\0\3\7\1\6"+
    "\5\0\2\6\1\0\5\6\4\0\3\6\4\0\2\6\1\0\2\6\1\0\2\6\1\0\2\6\2\0\1\7\1\0\5\7\4"+
    "\0\2\7\2\0\3\7\3\0\1\7\7\0\4\6\1\0\1\6\7\0\4\7\3\6\1\7\2\0\1\6\1\0\2\6\1\0"+
    "\3\6\2\7\1\0\3\7\2\0\1\6\11\0\1\7\1\6\1\0\6\6\3\0\3\6\1\0\4\6\3\0\2\6\1\0"+
    "\1\6\1\0\2\6\3\0\2\6\3\0\2\6\4\0\5\7\3\0\3\7\1\0\4\7\2\0\1\6\6\0\1\7\4\6\1"+
    "\0\5\6\3\0\1\6\7\7\1\0\2\7\5\0\2\7\3\0\2\7\1\0\3\6\1\0\2\6\5\0\3\6\2\0\1\6"+
    "\3\7\1\0\4\7\1\6\1\0\4\6\1\0\1\6\4\0\1\7\4\0\6\7\1\0\1\7\3\0\2\7\4\0\1\6\1"+
    "\7\2\6\7\7\4\0\10\6\3\7\7\0\2\6\1\0\1\6\2\0\2\6\1\0\1\6\2\0\1\6\6\0\4\6\1"+
    "\0\3\6\1\0\1\6\1\0\1\6\2\0\2\6\1\0\3\6\2\7\1\0\2\7\1\6\2\0\5\6\1\0\1\6\1\0"+
    "\6\7\2\0\2\7\2\0\4\6\5\0\1\7\1\0\1\7\1\0\1\7\4\0\2\7\5\6\3\7\6\0\1\7\1\0\7"+
    "\7\1\6\2\7\4\6\3\7\1\6\3\7\2\6\7\7\3\6\4\7\5\6\14\7\1\6\1\7\3\6\1\0\7\6\2"+
    "\0\3\7\2\6\3\7\3\0\2\6\2\7\4\0\1\6\1\0\2\7\4\0\4\6\10\7\3\0\1\6\3\0\2\6\1"+
    "\7\5\0\3\7\2\0\1\6\1\7\1\6\5\0\6\6\2\0\5\7\3\6\3\0\10\7\5\6\2\7\3\0\3\6\3"+
    "\7\1\0\5\7\4\6\1\7\4\6\3\7\2\6\2\0\1\6\1\0\1\6\1\0\1\6\1\0\1\6\2\0\3\6\1\0"+
    "\6\6\2\0\2\6\2\0\5\7\5\0\1\6\5\0\6\7\1\0\1\7\3\0\4\7\11\0\1\6\4\0\1\6\1\0"+
    "\5\6\2\0\1\6\1\0\4\6\1\0\3\6\2\0\4\6\5\0\5\6\4\0\1\6\4\0\4\6\3\7\2\6\5\0\2"+
    "\7\2\0\3\6\6\7\1\0\2\6\2\0\4\6\1\0\2\6\1\7\3\6\1\7\4\6\1\7\10\6\2\7\4\0\1"+
    "\6\1\7\4\0\1\7\5\6\2\7\3\0\3\6\4\0\3\6\2\7\2\0\6\6\1\0\3\7\1\0\2\7\5\0\5\6"+
    "\5\0\1\6\1\7\3\6\1\0\2\6\1\0\7\6\2\0\1\7\6\0\2\6\2\0\3\6\3\0\2\6\3\0\2\6\2"+
    "\0\3\7\4\0\3\6\1\0\2\6\1\0\1\6\5\0\1\7\2\0\1\6\3\0\1\6\2\0\2\6\3\7\1\0\2\7"+
    "\1\0\3\7\2\0\1\7\2\0\1\7\4\6\10\0\5\7\3\0\6\7\2\0\3\7\2\0\4\7\4\0\3\7\5\0"+
    "\1\6\2\0\2\6\2\0\4\6\1\0\4\6\1\0\1\6\1\0\6\6\2\0\5\6\1\0\4\6\1\0\4\6\2\0\2"+
    "\7\1\0\1\6\1\0\1\6\5\0\1\6\1\0\1\6\1\0\3\6\1\0\3\6\1\0\3\6");

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\2\0\1\1\2\2\1\1\1\3\2\4\2\3\1\5"+
    "\1\6\1\7\1\10\1\11\1\12\1\2\1\0\3\3"+
    "\1\13\1\14\1\15\1\16\1\17\2\0\3\3\1\0"+
    "\1\2\4\3\1\20\4\3\1\21\1\22";

  private static int [] zzUnpackAction() {
    int [] result = new int[45];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\31\0\62\0\113\0\62\0\144\0\175\0\62"+
    "\0\226\0\257\0\310\0\62\0\341\0\62\0\372\0\62"+
    "\0\u0113\0\u012c\0\u0145\0\u015e\0\u0177\0\u0190\0\62\0\62"+
    "\0\62\0\62\0\62\0\u01a9\0\u01c2\0\u01db\0\u01f4\0\u020d"+
    "\0\u0226\0\u01a9\0\u023f\0\u0258\0\u0271\0\u028a\0\175\0\u02a3"+
    "\0\u02bc\0\u02d5\0\u02ee\0\175\0\175";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[45];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\3\1\4\2\5\1\6\1\3\1\7\1\3\1\10"+
    "\1\11\1\12\1\13\11\7\1\14\1\15\1\16\1\3"+
    "\1\17\2\3\22\17\1\20\2\17\1\21\33\0\1\5"+
    "\32\0\1\22\1\23\31\0\17\7\14\0\2\11\25\0"+
    "\5\7\1\24\11\7\12\0\10\7\1\25\1\7\1\26"+
    "\4\7\32\0\1\27\2\0\1\17\2\0\22\17\1\0"+
    "\2\17\16\0\1\30\1\31\4\0\1\32\1\0\1\33"+
    "\3\0\1\22\1\4\1\5\26\22\5\34\1\35\23\34"+
    "\6\0\6\7\1\36\10\7\12\0\14\7\1\37\2\7"+
    "\12\0\12\7\1\40\4\7\4\0\5\34\1\41\27\34"+
    "\1\42\1\41\23\34\6\0\7\7\1\43\7\7\12\0"+
    "\4\7\1\44\12\7\12\0\13\7\1\45\3\7\4\0"+
    "\4\34\1\5\1\41\23\34\6\0\10\7\1\46\6\7"+
    "\12\0\16\7\1\47\12\0\14\7\1\50\2\7\12\0"+
    "\4\7\1\51\12\7\12\0\4\7\1\52\12\7\12\0"+
    "\11\7\1\53\5\7\12\0\15\7\1\54\1\7\12\0"+
    "\7\7\1\55\7\7\4\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[775];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String[] ZZ_ERROR_MSG = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\2\0\1\11\1\1\1\11\2\1\1\11\3\1\1\11"+
    "\1\1\1\11\1\1\1\11\2\1\1\0\3\1\5\11"+
    "\2\0\3\1\1\0\14\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[45];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private CharSequence zzBuffer = "";

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /**
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;

  /* user code: */
  StringBuffer string = new StringBuffer();

  private Symbol symbol(int type) {
    return new Symbol(type, yyline, yycolumn);
  }
  private Symbol symbol(int type, Object value) {
    return new Symbol(type, yyline, yycolumn, value);
  }


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  LLexer(java.io.Reader in) {
    this.zzReader = in;
  }


  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    int size = 0;
    for (int i = 0, length = packed.length(); i < length; i += 2) {
      size += packed.charAt(i);
    }
    char[] map = new char[size];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < packed.length()) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }

  public final int getTokenStart() {
    return zzStartRead;
  }

  public final int getTokenEnd() {
    return getTokenStart() + yylength();
  }

  public void reset(CharSequence buffer, int start, int end, int initialState) {
    zzBuffer = buffer;
    zzCurrentPos = zzMarkedPos = zzStartRead = start;
    zzAtEOF  = false;
    zzAtBOL = true;
    zzEndRead = end;
    yybegin(initialState);
  }

  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   *
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {
    return true;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final CharSequence yytext() {
    return zzBuffer.subSequence(zzStartRead, zzMarkedPos);
  }


  /**
   * Returns the character at position <tt>pos</tt> from the
   * matched text.
   *
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch.
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer.charAt(zzStartRead+pos);
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of
   * yypushback(int) and a match-all fallback rule) this method
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public Yytoken yylex() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    CharSequence zzBufferL = zzBuffer;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      boolean zzR = false;
      int zzCh;
      int zzCharCount;
      for (zzCurrentPosL = zzStartRead  ;
           zzCurrentPosL < zzMarkedPosL ;
           zzCurrentPosL += zzCharCount ) {
        zzCh = Character.codePointAt(zzBufferL, zzCurrentPosL/*, zzMarkedPosL*/);
        zzCharCount = Character.charCount(zzCh);
        switch (zzCh) {
        case '\u000B':
        case '\u000C':
        case '\u0085':
        case '\u2028':
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn += zzCharCount;
        }
      }

      if (zzR) {
        // peek one character ahead if it is \n (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL.charAt(zzMarkedPosL) == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof) 
            zzPeek = false;
          else 
            zzPeek = zzBufferL.charAt(zzMarkedPosL) == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL/*, zzEndReadL*/);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL/*, zzEndReadL*/);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + ZZ_CMAP(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
        return null;
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1: 
            { throw new Error("Illegal character <"+
                                                    yytext()+">");
            }
          case 19: break;
          case 2: 
            { /* ignore */
            }
          case 20: break;
          case 3: 
            { return symbol(sym.IDENTIFIER);
            }
          case 21: break;
          case 4: 
            { return symbol(sym.INTEGER_LITERAL);
            }
          case 22: break;
          case 5: 
            { string.setLength(0); yybegin(STRING);
            }
          case 23: break;
          case 6: 
            { return symbol(sym.EQ);
            }
          case 24: break;
          case 7: 
            { return symbol(sym.PLUS);
            }
          case 25: break;
          case 8: 
            { string.append( yytext() );
            }
          case 26: break;
          case 9: 
            { yybegin(YYINITIAL);
                                   return symbol(sym.STRING_LITERAL,
                                   string.toString());
            }
          case 27: break;
          case 10: 
            { string.append('\\');
            }
          case 28: break;
          case 11: 
            { return symbol(sym.EQEQ);
            }
          case 29: break;
          case 12: 
            { string.append('\t');
            }
          case 30: break;
          case 13: 
            { string.append('\r');
            }
          case 31: break;
          case 14: 
            { string.append('\n');
            }
          case 32: break;
          case 15: 
            { string.append('\"');
            }
          case 33: break;
          case 16: 
            { return symbol(sym.BREAK);
            }
          case 34: break;
          case 17: 
            { return symbol(sym.BOOLEAN);
            }
          case 35: break;
          case 18: 
            { return symbol(sym.ABSTRACT);
            }
          case 36: break;
          default:
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
